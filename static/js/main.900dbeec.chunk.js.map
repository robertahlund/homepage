{"version":3,"sources":["types/types.ts","components/menu/Menu.tsx","components/shared/Input.tsx","components/search/Search.tsx","constants/constants.ts","components/shared/ModalPortal.tsx","components/time/Time.tsx","components/shared/TextArea.tsx","components/shared/Button.tsx","components/icons/CloseIcon.tsx","components/favourites/FavouriteItem.tsx","components/favourites/Favourites.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SelectedModal","Menu","addNewBookmark","addNewFavourite","exportSettings","importSettings","toggleEditMode","isEditMode","className","onClick","Input","value","handleOnChange","handleKeyPress","placeholder","name","type","onChange","onKeyPress","Search","useState","searchValue","setSearchValue","event","charCode","window","location","href","encodeURI","target","modalPortal","document","getElementById","ModalPortal","children","toggleModal","ReactDOM","createPortal","div","animate","opacity","initial","exit","transition","duration","Time","Date","time","setTime","useEffect","intervalId","setInterval","clearInterval","format","TextArea","Button","text","onSubmit","disabled","loading","CloseIcon","height","width","onClickFunction","xmlns","viewBox","fill","d","regex","FavouriteItem","item","isBookmark","deleteItem","src","url","match","replace","alt","rel","length","substr","id","Favourites","items","map","index","key","App","favouriteFormValues","setFavouriteFormValues","selectedModal","setSelectedModal","editMode","setEditMode","favourites","setFavourites","bookmarks","setBookmarks","importValue","setImportValue","currentTarget","handleFormChange","title","storedFavourites","localStorage","getItem","storedBookmarks","JSON","parse","filter","bookmark","setItem","stringify","favourite","Bookmark","Favourite","Export","Import","newFavourite","uuidv4","newBookmark","btoa","settings","atob","parsedSettings","clear","Boolean","hostname","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAQYA,E,oECmCGC,G,MA/Ba,SAAC,GAOtB,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,kBAAkBC,QAASN,GAAzC,qBAGA,wBAAIK,UAAU,kBAAkBC,QAASP,GAAzC,oBAGA,wBAAIM,UAAU,kBAAkBC,QAASH,GACtCC,EAAa,eAAiB,aAEjC,wBAAIC,UAAU,kBAAkBC,QAASL,GAAzC,mBAGA,wBAAII,UAAU,kBAAkBC,QAASJ,GAAzC,uBCJOK,G,YApBe,SAAC,GAMxB,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,YACAC,EACI,EADJA,KAEA,OACE,2BACEP,UAAU,QACVQ,KAAK,OACLD,KAAMA,EACND,YAAaA,EACbH,MAAOA,EACPM,SAAUL,EACVM,WAAYL,MCMHM,EA5BI,WAAO,IAAD,EACeC,mBAAiB,IADhC,mBAChBC,EADgB,KACHC,EADG,KAgBvB,OACE,6BAASd,UAAU,oBACjB,kBAAC,EAAD,CACEK,eAhBa,SAACU,GACK,KAAnBA,EAAMC,WACRC,OAAOC,SAASC,KACd,+BAAiCC,UAAUP,KAc3CT,eAV0B,SAC9BW,GAEAD,EAAeC,EAAMM,OAAOlB,QAQxBA,MAAOU,EACPP,YAAY,uBC1BPgB,EAAcC,SAASC,eAAe,gB,QC+BpCC,G,MApB2B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACrD,OAAIL,EACKM,IAASC,aACd,kBAAC,IAAOC,IAAR,CACE9B,UAAU,mBACV+B,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GACjBG,WAAY,CAAEC,SAAU,IACxBnC,QAAS0B,GAET,yBAAK3B,UAAU,iBAAiB0B,IAElCJ,GAGK,O,gBCHIe,EApBE,WAAO,IAAD,EACGzB,mBAAe,IAAI0B,MADtB,mBACdC,EADc,KACRC,EADQ,KAYrB,OATAC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,EAAQ,IAAIF,QACX,KACH,OAAO,WACLM,cAAcF,MAEf,IAGD,yBAAK1C,UAAU,QACb,yBAAKA,UAAU,aAAa6C,YAAON,EAAM,iBACzC,yBAAKvC,UAAU,eAAe6C,YAAON,EAAM,gB,SNXrC/C,K,sBAAAA,E,oBAAAA,E,YAAAA,E,gBAAAA,E,iBAAAA,M,qBOmBGsD,EAjBqB,SAAC,GAK9B,IAJL3C,EAII,EAJJA,MACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,eACAC,EACI,EADJA,YAEA,OACE,8BACEN,UAAU,WACVM,YAAaA,EACbH,MAAOA,EACPM,SAAUL,EACVM,WAAYL,KCSH0C,G,MAlBiB,SAAC,GAAD,IAC9BvC,EAD8B,EAC9BA,KACAwC,EAF8B,EAE9BA,KACAC,EAH8B,EAG9BA,SAEAC,GAL8B,EAI9BC,QAJ8B,EAK9BD,UAL8B,OAO9B,4BACE1C,KAAMA,EACNP,QAASgD,EACTA,SAAUA,EACVjD,UAAU,SACVkD,SAAUA,GAETF,KCJUI,G,WAnBkB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBACjD,OACE,yBACEvD,UAAU,iBACVC,QAASsD,EACTC,MAAM,6BACNF,MAAOA,EACPD,OAAQA,EACRI,QAAQ,aAER,0BAAMxD,QAASsD,EAAiBG,KAAK,OAAOC,EAAE,oBAC9C,0BACE1D,QAASsD,EACTI,EAAE,qHCJJC,EAAgB,wBAoCPC,EAlC+B,SAAC,GAAD,IAC5CC,EAD4C,EAC5CA,KACA/D,EAF4C,EAE5CA,WACAgE,EAH4C,EAG5CA,WACAC,EAJ4C,EAI5CA,WAJ4C,OAM5C,yBAAKhE,UAAU,mBACb,yBACEA,UAAU,yBACViE,IAAG,oDAA+CH,EAAKI,IACpDC,MAAMP,GAAQ,GACdQ,QAAQ,UAAW,IACnBA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KACnBC,IAAI,YAEN,uBACErE,UAAU,wBACVmB,KAAM2C,EAAKI,IACX7C,OAAO,SACPiD,IAAI,uBAEHR,EAAKvD,KAAKgE,OAAS,GAAKT,EAAKvD,KAAKiE,OAAO,EAAG,IAAM,MAAQV,EAAKvD,MAEjER,GACC,kBAAC,EAAD,CACEsD,OAAO,OACPC,MAAM,OACNC,gBAAiB,kBAAMS,EAAWF,EAAKW,GAAIV,QCHpCW,EA5ByB,SAAC,GAKlC,IAJLC,EAII,EAJJA,MACA5E,EAGI,EAHJA,WACAgE,EAEI,EAFJA,WACAC,EACI,EADJA,WAEA,OAAIW,EAAMJ,OAAS,EAEf,6BAASvE,UAAU,cACjB,wBAAIA,UAAU,qBACV+D,EAA4B,YAAf,cAEjB,yBAAK/D,UAAU,oBACZ2E,EAAMC,KAAI,SAACd,EAAsCe,GAAvC,OACT,kBAAC,EAAD,CACEf,KAAMA,EACN/D,WAAYA,EACZ+E,IAAKD,EACLd,WAAYA,EACZC,WAAYA,SAMV,M,QCiLDe,EAnMC,WAAO,IAAD,EACkCnE,mBAEpD,CAAE6D,GAAI,GAAIlE,KAAM,GAAI2D,IAAK,KAHP,mBACbc,EADa,KACQC,EADR,OAIsBrE,mBACxC,MALkB,mBAIbsE,EAJa,KAIEC,EAJF,OAOYvE,oBAAkB,GAP9B,mBAObwE,EAPa,KAOHC,EAPG,OAQgBzE,mBAA2B,IAR3C,mBAQb0E,EARa,KAQDC,EARC,OASc3E,mBAA2B,IATzC,mBASb4E,EATa,KASFC,EATE,OAUkB7E,mBAAiB,IAVnC,mBAUb8E,EAVa,KAUAC,EAVA,KAYdhE,EAAc,SAACZ,GACfA,GACEA,EAAMM,SAAWN,EAAM6E,eACzBT,EAAiB,OAKjBU,EAAmB,SAAC9E,GACxBkE,EAAuB,2BAClBD,GADiB,kBAEnBjE,EAAMM,OAAOd,KAAOQ,EAAMM,OAAOlB,UAItCsC,qBAAU,WACRlB,SAASuE,MAAQ,UACjB,IAAMC,EAAkCC,aAAaC,QAAQ,cACvDC,EAAiCF,aAAaC,QAAQ,aACxDF,GACFR,EAAcY,KAAKC,MAAML,IAEvBG,GACFT,EAAaU,KAAKC,MAAMF,MAEzB,IAEH,IAwBMlC,EAAa,SAACS,EAAYV,GAC1BA,GACF0B,EAAa,YACRD,EAAUa,QAAO,SAACC,GAAD,OAA6BA,EAAS7B,KAAOA,OAEnEuB,aAAaO,QACX,YACAJ,KAAKK,UAAL,YACKhB,EAAUa,QAAO,SAACC,GAAD,OAA6BA,EAAS7B,KAAOA,UAIrEc,EAAc,YACTD,EAAWe,QACZ,SAACI,GAAD,OAA+BA,EAAUhC,KAAOA,OAGpDuB,aAAaO,QACX,aACAJ,KAAKK,UAAL,YACKlB,EAAWe,QACZ,SAACI,GAAD,OAA+BA,EAAUhC,KAAOA,UAsB1D,OACE,yBAAKzE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE2E,MAAOW,EACPvF,WAAYqF,EACZpB,WAAYA,IAEd,kBAAC,EAAD,CACEW,MAAOa,EACPzF,WAAYqF,EACZrB,YAAY,EACZC,WAAYA,IAEd,kBAAC,EAAD,CACEtE,eAAgB,kBAAMyF,EAAiB3F,EAAckH,WACrD/G,gBAAiB,kBAAMwF,EAAiB3F,EAAcmH,YACtD/G,eAAgB,kBAAMuF,EAAiB3F,EAAcoH,SACrD/G,eAAgB,kBAAMsF,EAAiB3F,EAAcqH,SACrD/G,eAAgB,kBAAMuF,GAAaD,IACnCrF,WAAYqF,KAEZF,IAAkB1F,EAAcmH,WAChCzB,IAAkB1F,EAAckH,WAChC,kBAAC,EAAD,CACE/E,YAAa,SAACZ,GAAD,OAA2BY,EAAYZ,KAEpD,wBAAIf,UAAU,gBAAd,UACU,IACPkF,IAAkB1F,EAAcmH,UAC7B,YACA,YAEN,kBAAC,EAAD,CACErG,YAAY,OACZH,MAAO6E,EAAoBzE,KAC3BA,KAAK,OACLH,eAAgByF,IAElB,kBAAC,EAAD,CACEvF,YAAY,MACZH,MAAO6E,EAAoBd,IAC3B3D,KAAK,MACLH,eAAgByF,IAElB,kBAAC,EAAD,CACE5C,SACEiC,IAAkB1F,EAAcmH,UAnHtB,WACpB,IAAIG,EAA+B9B,EACnC8B,EAAarC,GAAKsC,cAClBxB,EAAc,GAAD,mBAAKD,GAAL,CAAiBwB,KAC9Bd,aAAaO,QACX,aACAJ,KAAKK,UAAL,sBAAmBlB,GAAnB,CAA+BwB,MAEjC3B,EAAiB,MACjBF,EAAuB,CAAER,GAAI,GAAIlE,KAAM,GAAI2D,IAAK,MAG7B,WACnB,IAAI8C,EAA6BhC,EACjCgC,EAAYvC,GAAKsC,cACjBtB,EAAa,GAAD,mBAAKD,GAAL,CAAgBwB,KAC5BhB,aAAaO,QACX,YACAJ,KAAKK,UAAL,sBAAmBhB,GAAnB,CAA8BwB,MAEhC7B,EAAiB,MACjBF,EAAuB,CAAER,GAAI,GAAIlE,KAAM,GAAI2D,IAAK,MAkGxClB,KAAK,OACLxC,KAAK,aAIT0E,IAAkB1F,EAAcqH,QAChC3B,IAAkB1F,EAAcoH,SAChC,kBAAC,EAAD,CACEjF,YAAa,SAACZ,GAAD,OAA2BY,EAAYZ,KAEpD,wBAAIf,UAAU,gBACXkF,IAAkB1F,EAAcoH,OAC7B,kBACA,mBAEN,kBAAC,EAAD,CACExG,eACE8E,IAAkB1F,EAAcoH,OAC5B,kBAAM,MACN,SAAC7F,GAAD,OACE4E,EAAe5E,EAAMM,OAAOlB,QAEpCA,MACE+E,IAAkB1F,EAAcoH,OAC5B3F,OAAOgG,KAAKd,KAAKK,UAAU,CAAC,YAAIhB,GAAL,YAAqBF,MAChDI,IAGPR,IAAkB1F,EAAcqH,QAC/B,kBAAC,EAAD,CAAQ5D,SAhGK,WACrB,IAAMiE,EAAmBjG,OAAOkG,KAAKzB,GAC/B0B,EAAsDjB,KAAKC,MAC/Dc,GAEI1B,EAA6B4B,EAAe,GAC5C9B,EAA+B8B,EAAe,GACpDpB,aAAaqB,QACbrB,aAAaO,QAAQ,YAAaJ,KAAKK,UAAUhB,IACjDQ,aAAaO,QAAQ,aAAcJ,KAAKK,UAAUlB,IAClDC,EAAcD,GACdG,EAAaD,GACbL,EAAiB,OAoFyBnC,KAAK,SAASxC,KAAK,cClM7C8G,QACW,cAA7BrG,OAAOC,SAASqG,UAEe,UAA7BtG,OAAOC,SAASqG,UAEhBtG,OAAOC,SAASqG,SAASpD,MACvB,2DCZNvC,IAAS4F,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlG,SAASC,eAAe,SDiIpB,kBAAmBkG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.900dbeec.chunk.js","sourcesContent":["export interface IFavouriteItem {\n  id: string;\n  url: string;\n  name: string;\n}\n\nexport interface IBookmarkItem extends IFavouriteItem {}\n\nexport enum SelectedModal {\n  Favourite = \"Favourite\",\n  Bookmark = \"Bookmark\",\n  Edit = \"Edit\",\n  Export = \"Export\",\n  Import = \"Import\",\n}\n\nexport interface IconProps {\n  height: string;\n  width: string;\n  onClickFunction?: () => void;\n}\n","import React, { FC } from \"react\";\nimport \"./Menu.scss\";\n\ninterface MenuProps {\n  addNewFavourite: () => void;\n  addNewBookmark: () => void;\n  toggleEditMode: () => void;\n  exportSettings: () => void;\n  importSettings: () => void;\n  isEditMode: boolean;\n}\n\nconst Menu: FC<MenuProps> = ({\n  addNewBookmark,\n  addNewFavourite,\n  exportSettings,\n  importSettings,\n  toggleEditMode,\n  isEditMode,\n}) => {\n  return (\n    <nav className=\"menu\">\n      <ul className=\"menu-list\">\n        <li className=\"menu-list__item\" onClick={addNewFavourite}>\n          Add new favourite\n        </li>\n        <li className=\"menu-list__item\" onClick={addNewBookmark}>\n          Add new bookmark\n        </li>\n        <li className=\"menu-list__item\" onClick={toggleEditMode}>\n          {isEditMode ? \"Stop editing\" : \"Edit mode\"}\n        </li>\n        <li className=\"menu-list__item\" onClick={exportSettings}>\n          Export settings\n        </li>\n        <li className=\"menu-list__item\" onClick={importSettings}>\n          Import settings\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Menu;\n","import React, { FC, ChangeEvent, KeyboardEvent } from \"react\";\nimport \"./Input.scss\";\n\ninterface InputProps {\n  value: string;\n  placeholder?: string;\n  handleOnChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  handleKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n  name?: string;\n}\n\nconst Input: FC<InputProps> = ({\n  value,\n  handleOnChange,\n  handleKeyPress,\n  placeholder,\n  name,\n}) => {\n  return (\n    <input\n      className=\"input\"\n      type=\"text\"\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={handleOnChange}\n      onKeyPress={handleKeyPress}\n    />\n  );\n};\n\nexport default Input;\n","import React, { FC, useState, KeyboardEvent, ChangeEvent } from \"react\";\nimport \"./Search.scss\";\nimport Input from \"../shared/Input\";\n\nconst Search: FC = () => {\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n\n  const onKeyPress = (event: KeyboardEvent<HTMLInputElement>): void => {\n    if (event.charCode === 13) {\n      window.location.href =\n        \"https://google.com/search?q=\" + encodeURI(searchValue);\n    }\n  };\n\n  const handleSearchValueChange = (\n    event: ChangeEvent<HTMLInputElement>\n  ): void => {\n    setSearchValue(event.target.value);\n  };\n\n  return (\n    <section className=\"search-container\">\n      <Input\n        handleKeyPress={onKeyPress}\n        handleOnChange={handleSearchValueChange}\n        value={searchValue}\n        placeholder=\"Search on Google\"\n      />\n    </section>\n  );\n};\n\nexport default Search;\n","export const modalPortal = document.getElementById(\"modal-portal\");\n","import React, { FC, ReactNode, SyntheticEvent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { modalPortal } from \"../../constants/constants\";\nimport { motion } from \"framer-motion\";\nimport \"./ModalPortal.scss\";\n\ninterface ModalPortalProps {\n  children: ReactNode;\n  toggleModal: (event: SyntheticEvent) => void;\n}\n\nconst ModalPortal: FC<ModalPortalProps> = ({ children, toggleModal }) => {\n  if (modalPortal) {\n    return ReactDOM.createPortal(\n      <motion.div\n        className=\"modal-background\"\n        animate={{ opacity: 1 }}\n        initial={{ opacity: 0 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.3 }}\n        onClick={toggleModal}\n      >\n        <div className=\"modal-content\">{children}</div>\n      </motion.div>,\n      modalPortal\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default ModalPortal;\n","import React, { FC, useState, useEffect } from \"react\";\nimport \"./Time.scss\";\nimport { format } from \"date-fns\";\n\nconst Time: FC = () => {\n  const [time, setTime] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return (): void => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <div className=\"time\">\n      <div className=\"time__day\">{format(time, \"EEEE LLLL dd\")}</div>\n      <div className=\"time__clock\">{format(time, \"HH:mm:ss\")}</div>\n    </div>\n  );\n};\n\nexport default Time;\n","import React, { FC, ChangeEvent, KeyboardEvent } from \"react\";\nimport \"./TextArea.scss\";\n\ninterface TextAreaProps {\n  value: string;\n  placeholder?: string;\n  handleOnChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n  handleKeyPress?: (event: KeyboardEvent<HTMLTextAreaElement>) => void;\n}\n\nconst TextArea: FC<TextAreaProps> = ({\n  value,\n  handleOnChange,\n  handleKeyPress,\n  placeholder,\n}) => {\n  return (\n    <textarea\n      className=\"textarea\"\n      placeholder={placeholder}\n      value={value}\n      onChange={handleOnChange}\n      onKeyPress={handleKeyPress}\n    />\n  );\n};\n\nexport default TextArea;\n","import React, { FC, SyntheticEvent } from \"react\";\nimport \"./Button.scss\";\n\ninterface ButtonProps {\n  type: \"button\" | \"submit\";\n  text: string;\n  onSubmit:\n    | ((event: SyntheticEvent) => Promise<void>)\n    | ((event: SyntheticEvent) => void);\n  loading?: boolean;\n  disabled?: boolean;\n}\n\nconst Button: FC<ButtonProps> = ({\n  type,\n  text,\n  onSubmit,\n  loading,\n  disabled,\n}) => (\n  <button\n    type={type}\n    onClick={onSubmit}\n    onSubmit={onSubmit}\n    className=\"button\"\n    disabled={disabled}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import React, { FC } from \"react\";\nimport { IconProps } from \"../../types/types\";\nimport \"./Icon.scss\";\n\nconst CloseIcon: FC<IconProps> = ({ height, width, onClickFunction }) => {\n  return (\n    <svg\n      className=\"icon icon-path\"\n      onClick={onClickFunction}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={width}\n      height={height}\n      viewBox=\"0 0 24 24\"\n    >\n      <path onClick={onClickFunction} fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n      <path\n        onClick={onClickFunction}\n        d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"\n      />\n    </svg>\n  );\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { IFavouriteItem, IBookmarkItem } from \"../../types/types\";\nimport CloseIcon from \"../icons/CloseIcon\";\nimport \"./Favourites.scss\";\n\ninterface FavouriteItemProps {\n  item: IFavouriteItem | IBookmarkItem;\n  isEditMode: boolean;\n  isBookmark?: boolean;\n  deleteItem: (id: string, isBookmark?: boolean) => void;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst regex: RegExp = /^.+?[^\\/:](?=[?\\/]|$)/;\n\nconst FavouriteItem: FC<FavouriteItemProps> = ({\n  item,\n  isEditMode,\n  isBookmark,\n  deleteItem,\n}) => (\n  <div className=\"favourites-item\">\n    <img\n      className=\"favourites-item__image\"\n      src={`https://www.google.com/s2/favicons?domain=${item.url\n        .match(regex)![0]\n        .replace(\"http://\", \"\")\n        .replace(\"https://\", \"\")\n        .replace(\"www.\", \"\")}`}\n      alt=\"favicon\"\n    />\n    <a\n      className=\"favourites-item__name\"\n      href={item.url}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {item.name.length > 30 ? item.name.substr(0, 27) + \"...\" : item.name}\n    </a>\n    {isEditMode && (\n      <CloseIcon\n        height=\"18px\"\n        width=\"18px\"\n        onClickFunction={() => deleteItem(item.id, isBookmark)}\n      />\n    )}\n  </div>\n);\n\nexport default FavouriteItem;\n","import React, { FC } from \"react\";\nimport { IFavouriteItem, IBookmarkItem } from \"../../types/types\";\nimport \"./Favourites.scss\";\nimport FavouriteItem from \"./FavouriteItem\";\n\ninterface FavouritesProps {\n  items: IFavouriteItem[] | IBookmarkItem[];\n  isEditMode: boolean;\n  isBookmark?: boolean;\n  deleteItem: (id: string, isBookmark?: boolean) => void;\n}\n\nconst Favourites: FC<FavouritesProps> = ({\n  items,\n  isEditMode,\n  isBookmark,\n  deleteItem,\n}) => {\n  if (items.length > 0) {\n    return (\n      <section className=\"favourites\">\n        <h3 className=\"favourites__title\">\n          {!isBookmark ? \"Favourites\" : \"Bookmarks\"}\n        </h3>\n        <div className=\"favourites-items\">\n          {items.map((item: IFavouriteItem | IBookmarkItem, index: number) => (\n            <FavouriteItem\n              item={item}\n              isEditMode={isEditMode}\n              key={index}\n              isBookmark={isBookmark}\n              deleteItem={deleteItem}\n            />\n          ))}\n        </div>\n      </section>\n    );\n  } else return null;\n};\n\nexport default Favourites;\n","import React, {\n  FC,\n  useState,\n  ChangeEvent,\n  SyntheticEvent,\n  useEffect,\n} from \"react\";\nimport Menu from \"./components/menu/Menu\";\nimport Search from \"./components/search/Search\";\nimport ModalPortal from \"./components/shared/ModalPortal\";\nimport Time from \"./components/time/Time\";\nimport { IFavouriteItem, SelectedModal, IBookmarkItem } from \"./types/types\";\nimport \"./App.scss\";\nimport Input from \"./components/shared/Input\";\nimport TextArea from \"./components/shared/TextArea\";\nimport Button from \"./components/shared/Button\";\nimport Favourites from \"./components/favourites/Favourites\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst App: FC = () => {\n  const [favouriteFormValues, setFavouriteFormValues] = useState<\n    IFavouriteItem\n  >({ id: \"\", name: \"\", url: \"\" });\n  const [selectedModal, setSelectedModal] = useState<SelectedModal | null>(\n    null\n  );\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [favourites, setFavourites] = useState<IFavouriteItem[]>([]);\n  const [bookmarks, setBookmarks] = useState<IFavouriteItem[]>([]);\n  const [importValue, setImportValue] = useState<string>(\"\");\n\n  const toggleModal = (event: SyntheticEvent): void => {\n    if (event) {\n      if (event.target === event.currentTarget) {\n        setSelectedModal(null);\n      }\n    }\n  };\n\n  const handleFormChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setFavouriteFormValues({\n      ...favouriteFormValues,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  useEffect(() => {\n    document.title = \"New Tab\";\n    const storedFavourites: string | null = localStorage.getItem(\"favourites\");\n    const storedBookmarks: string | null = localStorage.getItem(\"bookmarks\");\n    if (storedFavourites) {\n      setFavourites(JSON.parse(storedFavourites));\n    }\n    if (storedBookmarks) {\n      setBookmarks(JSON.parse(storedBookmarks));\n    }\n  }, []);\n\n  const saveFavourite = (): void => {\n    let newFavourite: IFavouriteItem = favouriteFormValues;\n    newFavourite.id = uuidv4();\n    setFavourites([...favourites, newFavourite]);\n    localStorage.setItem(\n      \"favourites\",\n      JSON.stringify([...favourites, newFavourite])\n    );\n    setSelectedModal(null);\n    setFavouriteFormValues({ id: \"\", name: \"\", url: \"\" });\n  };\n\n  const saveBookmark = (): void => {\n    let newBookmark: IBookmarkItem = favouriteFormValues;\n    newBookmark.id = uuidv4();\n    setBookmarks([...bookmarks, newBookmark]);\n    localStorage.setItem(\n      \"bookmarks\",\n      JSON.stringify([...bookmarks, newBookmark])\n    );\n    setSelectedModal(null);\n    setFavouriteFormValues({ id: \"\", name: \"\", url: \"\" });\n  };\n\n  const deleteItem = (id: string, isBookmark?: boolean) => {\n    if (isBookmark) {\n      setBookmarks([\n        ...bookmarks.filter((bookmark: IBookmarkItem) => bookmark.id !== id),\n      ]);\n      localStorage.setItem(\n        \"bookmarks\",\n        JSON.stringify([\n          ...bookmarks.filter((bookmark: IBookmarkItem) => bookmark.id !== id),\n        ])\n      );\n    } else {\n      setFavourites([\n        ...favourites.filter(\n          (favourite: IFavouriteItem) => favourite.id !== id\n        ),\n      ]);\n      localStorage.setItem(\n        \"favourites\",\n        JSON.stringify([\n          ...favourites.filter(\n            (favourite: IFavouriteItem) => favourite.id !== id\n          ),\n        ])\n      );\n    }\n  };\n\n  const importSettings = (): void => {\n    const settings: string = window.atob(importValue);\n    const parsedSettings: [IBookmarkItem[], IFavouriteItem[]] = JSON.parse(\n      settings\n    );\n    const bookmarks: IBookmarkItem[] = parsedSettings[0];\n    const favourites: IFavouriteItem[] = parsedSettings[1];\n    localStorage.clear();\n    localStorage.setItem(\"bookmarks\", JSON.stringify(bookmarks));\n    localStorage.setItem(\"favourites\", JSON.stringify(favourites));\n    setFavourites(favourites);\n    setBookmarks(bookmarks);\n    setSelectedModal(null);\n  };\n\n  return (\n    <div className=\"app\">\n      <Time />\n      <Search />\n      <Favourites\n        items={favourites}\n        isEditMode={editMode}\n        deleteItem={deleteItem}\n      />\n      <Favourites\n        items={bookmarks}\n        isEditMode={editMode}\n        isBookmark={true}\n        deleteItem={deleteItem}\n      />\n      <Menu\n        addNewBookmark={() => setSelectedModal(SelectedModal.Bookmark)}\n        addNewFavourite={() => setSelectedModal(SelectedModal.Favourite)}\n        exportSettings={() => setSelectedModal(SelectedModal.Export)}\n        importSettings={() => setSelectedModal(SelectedModal.Import)}\n        toggleEditMode={() => setEditMode(!editMode)}\n        isEditMode={editMode}\n      />\n      {(selectedModal === SelectedModal.Favourite ||\n        selectedModal === SelectedModal.Bookmark) && (\n        <ModalPortal\n          toggleModal={(event: SyntheticEvent) => toggleModal(event)}\n        >\n          <h2 className=\"modal-header\">\n            Add new{\" \"}\n            {selectedModal === SelectedModal.Favourite\n              ? \"favourite\"\n              : \"bookmark\"}\n          </h2>\n          <Input\n            placeholder=\"Name\"\n            value={favouriteFormValues.name}\n            name=\"name\"\n            handleOnChange={handleFormChange}\n          />\n          <Input\n            placeholder=\"Url\"\n            value={favouriteFormValues.url}\n            name=\"url\"\n            handleOnChange={handleFormChange}\n          />\n          <Button\n            onSubmit={\n              selectedModal === SelectedModal.Favourite\n                ? saveFavourite\n                : saveBookmark\n            }\n            text=\"Save\"\n            type=\"button\"\n          />\n        </ModalPortal>\n      )}\n      {(selectedModal === SelectedModal.Import ||\n        selectedModal === SelectedModal.Export) && (\n        <ModalPortal\n          toggleModal={(event: SyntheticEvent) => toggleModal(event)}\n        >\n          <h2 className=\"modal-header\">\n            {selectedModal === SelectedModal.Export\n              ? \"Export settings\"\n              : \"Import settings\"}\n          </h2>\n          <TextArea\n            handleOnChange={\n              selectedModal === SelectedModal.Export\n                ? () => null\n                : (event: ChangeEvent<HTMLTextAreaElement>) =>\n                    setImportValue(event.target.value)\n            }\n            value={\n              selectedModal === SelectedModal.Export\n                ? window.btoa(JSON.stringify([[...bookmarks], [...favourites]]))\n                : importValue\n            }\n          />\n          {selectedModal === SelectedModal.Import && (\n            <Button onSubmit={importSettings} text=\"Import\" type=\"button\" />\n          )}\n        </ModalPortal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}